http://curric.rithmschool.com/springboard/lectures/how-web-works/



Part One: Solidify Terminology

In your own terms, define the following terms:

    What is HTTP?
    
    - hyper text transfer protocol ,  is the protocol used to get data across web servers.

    What is a URL?
    
    - It's the full adress of the data we want, an url have a protocol, hostname, port, resource and query.

    What is DNS?
    
    - Domain name system, it translates the hostnames into their respective ip adresses.

    What is a query string?
    
    - Arguments sent to the server to give some specifics to a resource.

    What are two HTTP verbs and how are they different?
    
    - GET and POST, GET method only retrieves data from server without changes, POST mehotd changes data to the server.

    What is an HTTP request?
    
    - Is the term used to request data from a web server.

    What is an HTTP response?
    
    - Is the response given by the web server for a request.

    What is an HTTP header? Give a couple examples of request and response headers you have seen.
    
    - the header clarifies the parameters that are being either requested or responded. Some request headers include Accept as file formatting, Accept-language for languages, Host, etc.. Response headers include Status codes to see how the server responded(200,300,400,500...),
    Date, content, etc..

    What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?

    - Using http protocol(port:80), translate somesite.com to Ip adress an get some/page.html as resource.



Part Two: Practice Tools

    Using curl, make a GET request to the icanhazdadjoke.com API to find all jokes involving the word “pirate”
    Use dig to find what the IP address is for icanhazdadjoke.com
    Make a simple web page and serve it using python3 -m http.server. Visit the page in a browser.

$ curl https://icanhazdadjoke.com/search?term=pirate
$ dig icanhazdadjoke.com // 172.67.211.64 and 104.21.37.176
$ mkdir web, $ nano index.html (include html tag and body), $ python3 -m http.server // localhost:8000



Part Three: Explore Dev Tools

Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.

// check index.html and logged.html files.

Part Four: Explore the URL API

At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

Read about the URL API

Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.

- const url = new URL(window.location.href) // gives me an object with all properties as keys such as host, search, href.. etc.

- then we have methods like toString or toJSON
- and some properties are search , href, protocol, username, password, host, pathname...etc..